#+TITLE: Proyecto GUI MatLab - Grupo 6
#+AUTHOR: Grupo 6
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* Interfaz grafica en MatLab

** Main

Script que usamos para correr la gui inicialmente. Define algunos valores por defecto y llama al
menu de elección.

#+begin_src octave :results output :tangle main.m
  set(0, 'defaultlinelinewidth', 2);
  set (0, 'defaulttextfontname', 'TimesNewRoman')
  set (0, 'defaulttextfontsize', 20)
  set (0, 'DefaultAxesFontName', 'TimesNewRoman')
  set(0, 'DefaultAxesFontSize', 20)

  clear h

  h = guidata (gcf);
  menu_eleccion (gcf, true);
  set (gcf, 'color', get(0, 'defaultuicontrolbackgroundcolor'))
  set (gcf, 'name', 'Menu Inicio')
  set (gcf, 'numbertitle', 'off')
  set (gcf, 'toolbar', 'none')
  set (gcf, 'menubar', 'none')

#+end_src

** Menu eleccion

Menu que permite elegir que funcionalidad del programa usaremos. Actualmente solo implementada la
opción de Graficar funciones.

#+begin_src octave :results output :tangle menu_eleccion.m

  function menu_eleccion(obj, init)
    clear h

    h = guidata(obj);

    %% Grupo e Integrantes
    h.grupo = uicontrol('style', 'text',...
			'string', 'Grupo 6',...
			'units','normalized',...
			'position',[0.55 0.75 0.4 0.045]);
    h.integrantes = uicontrol('style', 'text',...
			'string', 'Integrantes:',...
			'units','normalized',...
			'position',[0.55 0.7 0.4 0.045]);
    h.int1 = uicontrol('style', 'text',...
			'string', '- Gonzales Morales Beckham Luis',...
			'units','normalized',...
			'position',[0.55 0.65 0.4 0.045]);
    h.int2 = uicontrol('style', 'text',...
			'string', '- Moran Aragon Lucia Camila',...
			'units','normalized',...
			'position',[0.55 0.6 0.4 0.045]);
    h.int3 = uicontrol('style', 'text',...
			'string', '- Pozo Velarde Luis Felipe',
			'units','normalized',...
			'position',[0.55 0.55 0.4 0.045]);
    h.int4 = uicontrol('style', 'text',...
			'string', '- Ramirez Chero Alejandro David',...
			'units','normalized',...
			'position',[0.55 0.5 0.4 0.045]);
    h.int5 = uicontrol('style', 'text',...
			'string', '- Saico Merma Cristhian Daniel',...
			'units','normalized',...
			'position',[0.55 0.45 0.4 0.045]);
    h.int6 = uicontrol('style', 'text',...
			'string', '- Vega Astocondor Diego Alonso',...
			'units','normalized',...
			'position',[0.55 0.4 0.4 0.045]);


    %% Botones
    h.titulo = uicontrol ('style', 'text',...
			  'units', 'normalized',...
			  'string', 'Elija una opcion',...
			  'position', [0.05 0.8 0.5 0.09]);

    h.boton_grafica = uicontrol ('style', 'pushbutton',...
				 'units', 'normalized',...
				 'string', 'Grafica de funciones',...
				 'callback', @menu_grafica,...
				 'position', [0.05 0.7 0.5 0.09]);

    h.boton_curvas = uicontrol ('style', 'pushbutton',...
				'units', 'normalized',...
				'string', 'Curvas de Bezier',...
				'callback', @actualizar_plot,...
				'position', [0.05 0.6 0.5 0.09]);

    % Si necesitan añadir nuevos botones copien un boton de arriba y reduzcan en
    % 0.1 el segundo elemento del vector posicion, en string poner una
    % descripcion de su menu y en callback el nombre de su funcion con un arroba
    % al inicio.

  end 

#+end_src

#+RESULTS:

** Menu grafica

El menu de grafico de funciones y sus respectivas derivadas.

#+begin_src octave :results output :tangle menu_grafica.m
  function menu_grafica (obj, init)

    pkg load symbolic;

    h.main_frame = figure('name', 'Menu grafica','numbertitle','off');

    h.label_derivada = uicontrol (h.main_frame,'style', 'text',...
				  'units', 'normalized',...
				  'string', 'Funcion',...
				  'Position', [0.05 0.9 0.2 0.09]);

    h.funcion = uicontrol(h.main_frame,'style', 'edit',...
			  'units', 'normalized',...
			  'Position', [0.05 0.8 0.2 0.09]);


    h.graficar_funcion = uicontrol (h.main_frame,'style', 'pushbutton',...
				    'units', 'normalized',...
				    'string', 'Graficar',...
				    'callback', {@actualizar_plot},...
				    'position', [0.05 0.7 0.2 0.09]);

    h.label_derivada = uicontrol (h.main_frame,'style', 'text',...
				  'units', 'normalized',...
				  'string', 'Orden derivacion',...
				  'Position', [0.05 0.6 0.2 0.09]);

    h.grado_derivada = uicontrol(h.main_frame,'style', 'edit',...
				 'units', 'normalized',...
				 'value', 0,...
				 'Position', [0.05 0.5 0.2 0.09]);


    h.label_intervalo = uicontrol (h.main_frame,'style', 'text',...
				   'units', 'normalized',...
				   'string', 'Intervalo',...
				   'Position', [0.05 0.4 0.2 0.09]);

    h.intervalo1 = uicontrol(h.main_frame,'style', 'edit',...
			     'units', 'normalized',...
			     'value', -2,...
			     'Position', [0.05 0.3 0.1 0.09]);

    h.intervalo2 = uicontrol(h.main_frame,'style', 'edit',...
			     'units', 'normalized',...
			     'value',2,...
			     'Position', [0.15 0.3 0.1 0.09]);

    h.ejes = axes ('position', [0.5 0.2 0.4 0.7]);

    guidata(h.main_frame, h)

    set (gcf, 'color', get(0, 'defaultuicontrolbackgroundcolor'))

    function actualizar_plot (obj, init)
      h = guidata(obj);

      syms x
      y =  get(h.funcion, 'String');

      if (isempty(y))
	yy = sym('x^3');
      else
	yy = sym(y);
      end

      der_fixer = 1;

      grado = 0 + 1*str2num(get(h.grado_derivada, 'String'));

      int_inicio =  str2num(get(h.intervalo1, 'String'));
      int_fin =  str2num(get(h.intervalo2, 'String'));

      if (isempty(int_inicio))
	int_inicio = get(h.intervalo1, 'value');
      end

      if (isempty(int_fin))
	int_fin = get(h.intervalo2, 'value');
      end

      if (int_inicio > int_fin)
	[int_inicio int_fin] = deal(int_fin, int_inicio);
      end 

      if (isempty(grado))
	grado = 0;
      end

      dy = diff(yy,x,grado);

      if (isallconstant(dy))
	mensaje_error('La funcion no acepta ese orden de derivacion')
	while (isallconstant(dy))
	  dy = diff(yy,x,grado - der_fixer);
	  der_fixer = der_fixer + 1;
	end
      end
      h.grafica = ezplot(dy, [int_inicio int_fin]);
      guidata (obj, h);
    end

  end 

#+end_src

** Mensaje de error

Mensaje de error que se usara para informar al usuario mas adelante.

#+begin_src octave :results output :tangle mensaje_error.m
  function mensaje_error(msg)
    msgbox(msg, 'Error','error');
  end 

#+end_src

#+RESULTS:



